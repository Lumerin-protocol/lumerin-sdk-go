// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: connection/v1/connection.proto

package connectionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionsServiceClient is the client API for ConnectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionsServiceClient interface {
	GetConnections(ctx context.Context, in *GenConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
	GetConnection(ctx context.Context, in *GenConnectionRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
	WatchConnectionStatus(ctx context.Context, in *WatchConnectionStatusRequest, opts ...grpc.CallOption) (ConnectionsService_WatchConnectionStatusClient, error)
}

type connectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionsServiceClient(cc grpc.ClientConnInterface) ConnectionsServiceClient {
	return &connectionsServiceClient{cc}
}

func (c *connectionsServiceClient) GetConnections(ctx context.Context, in *GenConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connection.v1.ConnectionsService/GetConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) GetConnection(ctx context.Context, in *GenConnectionRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connection.v1.ConnectionsService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) WatchConnectionStatus(ctx context.Context, in *WatchConnectionStatusRequest, opts ...grpc.CallOption) (ConnectionsService_WatchConnectionStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConnectionsService_ServiceDesc.Streams[0], "/connection.v1.ConnectionsService/WatchConnectionStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectionsServiceWatchConnectionStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConnectionsService_WatchConnectionStatusClient interface {
	Recv() (*WatchConnectionStatusResponse, error)
	grpc.ClientStream
}

type connectionsServiceWatchConnectionStatusClient struct {
	grpc.ClientStream
}

func (x *connectionsServiceWatchConnectionStatusClient) Recv() (*WatchConnectionStatusResponse, error) {
	m := new(WatchConnectionStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectionsServiceServer is the server API for ConnectionsService service.
// All implementations should embed UnimplementedConnectionsServiceServer
// for forward compatibility
type ConnectionsServiceServer interface {
	GetConnections(context.Context, *GenConnectionsRequest) (*GetConnectionsResponse, error)
	GetConnection(context.Context, *GenConnectionRequest) (*GetConnectionsResponse, error)
	WatchConnectionStatus(*WatchConnectionStatusRequest, ConnectionsService_WatchConnectionStatusServer) error
}

// UnimplementedConnectionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectionsServiceServer struct {
}

func (UnimplementedConnectionsServiceServer) GetConnections(context.Context, *GenConnectionsRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedConnectionsServiceServer) GetConnection(context.Context, *GenConnectionRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedConnectionsServiceServer) WatchConnectionStatus(*WatchConnectionStatusRequest, ConnectionsService_WatchConnectionStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConnectionStatus not implemented")
}

// UnsafeConnectionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionsServiceServer will
// result in compilation errors.
type UnsafeConnectionsServiceServer interface {
	mustEmbedUnimplementedConnectionsServiceServer()
}

func RegisterConnectionsServiceServer(s grpc.ServiceRegistrar, srv ConnectionsServiceServer) {
	s.RegisterService(&ConnectionsService_ServiceDesc, srv)
}

func _ConnectionsService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.v1.ConnectionsService/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).GetConnections(ctx, req.(*GenConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.v1.ConnectionsService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).GetConnection(ctx, req.(*GenConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_WatchConnectionStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConnectionStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectionsServiceServer).WatchConnectionStatus(m, &connectionsServiceWatchConnectionStatusServer{stream})
}

type ConnectionsService_WatchConnectionStatusServer interface {
	Send(*WatchConnectionStatusResponse) error
	grpc.ServerStream
}

type connectionsServiceWatchConnectionStatusServer struct {
	grpc.ServerStream
}

func (x *connectionsServiceWatchConnectionStatusServer) Send(m *WatchConnectionStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConnectionsService_ServiceDesc is the grpc.ServiceDesc for ConnectionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connection.v1.ConnectionsService",
	HandlerType: (*ConnectionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnections",
			Handler:    _ConnectionsService_GetConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _ConnectionsService_GetConnection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConnectionStatus",
			Handler:       _ConnectionsService_WatchConnectionStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "connection/v1/connection.proto",
}
